# Train-ticket Microservice System Testing Configuration
# Updated for testing two-stage LLM + semantic expansion approach

# API name
api=TrainTicket

# CONFIGURATION PARAMETERS

# Test case generator - MST for multi-service testing
generator=MST

# Number of test cases to be generated per operation on each iteration
# Increased to better see the variant generation
testsperoperation=10

# OAS specification - path to merged OpenAPI spec
oas.path=src/main/resources/My-Example/trainticket/merged_openapi_spec 1.yaml

# Test configuration file - generated by MicroserviceConfBuilderMain
conf.path=src/main/resources/My-Example/trainticket/real-system-conf.yaml

# Directory where the test cases will be generated (temporary simplified path for testing)
test.target.dir=src/test/java

# Package name (must be valid Java identifier - no hyphens)
test.target.package=trainticket

# Experiment name (for naming related folders and files)
experiment.name=trainticket_twostage_test

# Test class name prefix
testclass.name=TrainTicketTwoStageTest

# Execute the test cases (disabled for multi-service test generation)
experiment.execute=true

# Generate Allure reports (enabled for improved test reporting)
allure.report=true

# Check test cases with OAS validator (disabled to prevent validation delays)
testcases.check=false

# Measure input coverage (disabled for MST mode)
coverage.input=false

# Measure output coverage (disabled for MST mode)
coverage.output=false

# Enable CSV statistics 
stats.csv=true

# Delete previous results before starting
deletepreviousresults=true

# Maximum number of test cases to be generated (-1 for infinite)
# Set to -1 to allow the natural stopping point after one iteration
numtotaltestcases=-1

# Maximum number of iterations (set to 1 for single generation)
max.iterations=1

# Optional delay between each iteration (in seconds, -1 for no delay)
delay=-1

# Ratio of faulty test cases to be generated (negative testing)
faulty.ratio=0.1

# CONFIGURATION SETTINGS FOR CONSTRAINT-BASED TESTING

# Ratio of faulty test cases to be generated due to broken dependencies
faulty.dependency.ratio=0.05

# Number of test cases after which new test data will be loaded
reloadinputdataevery=50

# Max number of data values for each parameter
inputdatamaxvalues=500

# TRAIN-TICKET SPECIFIC SETTINGS

# Base URL for the Train-ticket system
base.url=http://129.62.148.112:32677

# Authentication settings
auth.admin.username=admin
auth.admin.password=222222
auth.user.username=fdse_microservice
auth.user.password=111111

# LLM CONFIGURATION FOR TWO-STAGE APPROACH
# Enable LLM for parameter generation
llm.enabled=true

# Model selection: local, gemini, or ollama
llm.model.type=ollama

# Local LLM settings (disabled when using Ollama)
llm.local.enabled=false
llm.local.url=http://localhost:4891/v1/chat/completions
llm.local.model=llama-3-8b-instruct

# Gemini API settings (disabled when using Ollama)
llm.gemini.enabled=false
llm.gemini.api.key=AIzaSyANJa0k_Ap8JROFtAh7BbxQo3XrVGHLR-c
llm.gemini.model=gemini-2.0-flash-exp
llm.gemini.api.url=https://generativelanguage.googleapis.com/v1beta/models

# Ollama API settings (enabled for current use)
llm.ollama.enabled=true
llm.ollama.url=http://localhost:11434
llm.ollama.model=gemma3:4b

# Rate limiting settings (less needed for local Ollama)
llm.rate.limit.retry.enabled=true
llm.rate.limit.max.retries=2

# LLM COMMUNICATION LOGGING CONFIGURATION
# Enable detailed logging of all LLM communications (requests and responses)
llm.communication.logging.enabled=true

# Directory where LLM communication logs will be stored
llm.communication.logging.dir=logs/llm-communications

# Log file naming pattern (timestamp will be added automatically)
llm.communication.logging.file.prefix=llm-communication

# Include response time measurements in logs
llm.communication.logging.include.response.time=true

# Include request/response content in logs (set to false for privacy)
llm.communication.logging.include.content=true

# Include model-specific metadata (model name, temperature, etc.)
llm.communication.logging.include.metadata=true

# Log level for LLM communications (DEBUG, INFO, WARN, ERROR)
llm.communication.logging.level=INFO

# Maximum content length to log (truncate longer content, -1 for no limit)
llm.communication.logging.max.content.length=-1

# SYSTEM RESOURCE MONITORING CONFIGURATION (LOCAL & OLLAMA ONLY)
# ==============================================================
# Enable system resource monitoring during local LLM communications
# Note: Resource usage is captured during LLM generation and included in communication logs
# Only monitors LOCAL and OLLAMA models, not online APIs like Gemini
llm.resource.monitoring.enabled=true

# Monitoring interval in milliseconds (how often to sample CPU/Memory during generation)
# Recommended values: 250ms (detailed), 500ms (balanced), 1000ms (light)
llm.resource.monitoring.interval.ms=500

# Include detailed memory information (heap, non-heap memory usage)
llm.resource.monitoring.include.detailed.memory=true

# Include CPU usage monitoring
llm.resource.monitoring.include.cpu=true

# Two-stage parameter generation settings
llm.seed.count=5
semantic.expansion.target=15
semantic.word2vec.enabled=true
semantic.bert.enabled=true

# Execute test cases after generation (enabled to generate Allure reports)
executeTestCases=true

# SMART INPUT FETCHING SYSTEM CONFIGURATION
# Enable intelligent input fetching from existing APIs
smart.input.fetch.enabled=true

# Percentage of inputs to fetch from smart sources vs traditional LLM generation (0.0-1.0)
smart.input.fetch.percentage=0

# Path to the input fetch registry file (stores learned API mappings)
smart.input.fetch.registry.path=src/main/resources/My-Example/trainticket/input-fetch-registry.yaml

# Path to the OpenAPI specification file for endpoint discovery
smart.input.fetch.openapi.spec.path=src/main/resources/My-Example/trainticket/merged_openapi_spec 1.yaml

# Enable LLM-powered API discovery and parameter matching
smart.input.fetch.llm.discovery.enabled=true

# Maximum number of candidate APIs to consider per parameter
smart.input.fetch.max.candidates=5

# Enable dependency chain resolution for complex parameter relationships
smart.input.fetch.dependency.resolution.enabled=true

# Timeout for API discovery requests (milliseconds)
smart.input.fetch.discovery.timeout.ms=5000

# Enable caching of fetched values to improve performance
smart.input.fetch.cache.enabled=true

# Cache TTL in seconds
smart.input.fetch.cache.ttl.seconds=300

# Priority configuration for different discovery methods
smart.input.fetch.default.priority=5
smart.input.fetch.pattern.discovery.priority=5
smart.input.fetch.llm.discovery.priority=7

# HTTP configuration for API requests
smart.input.fetch.http.content.type=application/json
smart.input.fetch.http.success.code=200
smart.input.fetch.schema.discovery.timeout.ms=3000

# DEBUGGING AND LOGGING SETTINGS
# Enable detailed logging for two-stage approach
logging.level.root=INFO
logging.level.es.us.isa.restest.generators.MultiServiceTestCaseGenerator=DEBUG
logging.level.es.us.isa.restest.generators.SemanticParameterExpander=DEBUG
logging.level.es.us.isa.restest.generators.AiDrivenLLMGenerator=DEBUG
logging.level.es.us.isa.restest.workflow.TraceWorkflowExtractor=DEBUG

# Log to file instead of console
logToFile=true
data.log.dir=logs
data.log.file=trainticket_test_execution.log

# Trace file path (hardcoded in TestGenerationAndExecution.java)
# This property is for documentation - actual path is src/main/resources/My-Example/trainticket/traces/
trace.file.path=src/main/resources/My-Example/trainticket/traces/

# Test variant generation (increased to match testsperoperation)
test.variants.per.scenario=10

# MST step generation control
# If true, generator keeps only the first business step per scenario (writer still logs in as step 0)
mst.generate.only.first.step=true

# ROOT API REGISTRY CONFIGURATION
# Enable and configure Root API Registry for tracking unique root APIs and their microservice interaction trees
# The registry prevents duplicate root APIs and maintains tree structures for each root API
root.api.registry.enabled=true

# Path where the Root API Registry JSON file will be stored
# This file contains all discovered root APIs with their complete microservice interaction trees
root.api.registry.path=src/main/resources/My-Example/trainticket/root-api-registry.json

# Enable detailed logging for root API registry operations
root.api.registry.debug.logging=false

# SEMANTIC EXPANSION CONFIGURATION
# Word2Vec model path (optional)
word2vec.model.path=src/main/resources/GoogleNews-vectors-negative300.bin

# BERT model configuration (simplified)
bert.model.enabled=false
bert.model.path=

# Test generation focus
focus.on.parameter.generation=true
focus.on.semantic.expansion=true

# Detailed output for debugging
verbose.parameter.generation=true
verbose.semantic.expansion=true
verbose.test.case.creation=true