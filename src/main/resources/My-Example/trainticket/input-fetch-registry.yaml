---
version: "1.0"
lastUpdated:
- 2025
- 7
- 23
- 20
- 44
- 13
- 137913500
parameterMappings:
  body:
  - endpoint: "/api/v1/stationservice/stations"
    method: "GET"
    service: "ts-station-service"
    extractPath: "$.data[*]"
    priority: 7
    lastUsed:
    - 2025
    - 7
    - 23
    - 20
    - 44
    - 13
    - 81766300
    successRate: 0.0
    description: null
  - endpoint: "/api/v1/travelplanservice/travelPlan/cheapest"
    method: "GET"
    service: "ts-travel-plan-service"
    extractPath: "$.data[*]"
    priority: 7
    lastUsed:
    - 2025
    - 7
    - 23
    - 20
    - 44
    - 13
    - 136913700
    successRate: 0.0
    description: null
servicePatterns:
- pattern: ".*[Ss]tation.*"
  services:
  - "ts-station-service"
  endpoints:
  - "/api/v1/stationservice/stations"
- pattern: ".*[Uu]ser.*|.*[Ll]ogin.*"
  services:
  - "ts-user-service"
  - "ts-contacts-service"
  endpoints:
  - "/api/v1/userservice/users"
  - "/api/v1/contactservice/contacts"
- pattern: ".*[Tt]rain.*"
  services:
  - "ts-train-service"
  - "ts-travel-service"
  endpoints:
  - "/api/v1/trainservice/trains"
  - "/api/v1/travelservice/trips"
- pattern: ".*[Rr]oute.*|.*[Ii]d.*"
  services:
  - "ts-route-service"
  - "ts-route-plan-service"
  - "ts-admin-route-service"
  endpoints:
  - "/api/v1/routeservice/routes"
  - "/api/v1/routeplanservice/routePlans"
  - "/api/v1/adminrouteservice/adminroute"
- pattern: ".*[Oo]rder.*"
  services:
  - "ts-order-service"
  - "ts-order-other-service"
  endpoints:
  - "/api/v1/orderservice/orders"
  - "/api/v1/orderOtherservice/orderOthers"
- pattern: ".*[Dd]istance.*"
  services:
  - "ts-route-service"
  - "ts-admin-route-service"
  endpoints:
  - "/api/v1/routeservice/routes"
  - "/api/v1/adminrouteservice/adminroute"
- pattern: ".*[Pp]rice.*|.*[Cc]ost.*"
  services:
  - "ts-price-service"
  - "ts-travel-service"
  endpoints:
  - "/api/v1/priceservice/prices"
  - "/api/v1/travelservice/trips"
llmPrompts:
  apiDiscovery: "Parameter: {parameterName} (type: {parameterType}, location: {parameterLocation})\n\
    Description: {parameterDescription}\n\nServices: {availableServices}\n\n\
    Task: Select the TOP 3 services most likely to provide realistic data for this parameter.\n\
    Consider semantic meaning and naming patterns.\n\n\
    Respond ONLY with a JSON array of exactly 3 service names in priority order:\n\
    [\"service1\", \"service2\", \"service3\"]\n\n\
    No explanations, no extra text, just the JSON array."
  endpointDiscovery: "Given this microservice: {serviceName}\nAnd this input parameter:\
    \ {parameterName} (type: {parameterType}, description: {parameterDescription})\n\
    \nWhat would be the most likely REST API endpoint path within this service to\
    \ fetch data for this parameter?\nConsider RESTful conventions, resource naming,\
    \ and the parameter's semantic meaning.\n\nRespond with a JSON object containing:\n\
    {\n  \"endpoint\": \"/api/v1/path/to/resource\",\n  \"method\": \"GET\",\n  \"\
    confidence\": 0.85\n}\n"
  dataExtraction: "API Response: {responseSchema}\n\n\
    Target Parameter: {parameterName} (type: {parameterType})\n\
    Task: Find the JSONPath to extract values suitable for parameter '{parameterName}'.\n\
    Look for fields that match the parameter name or semantic meaning.\n\n\
    Examples:\n\
    - For 'stationName' parameter: $.data[*].name or $.data[*].stationName\n\
    - For 'distanceList' parameter: $.data[*].distances or $.data[*].route.distances\n\
    - For 'id' parameter: $.data[*].id\n\n\
    JSONPath for '{parameterName}':"
  valueSelection: "Data: {extractedData}\nParameter: {parameterName} (type: {parameterType})\n\n\
    Task: Select the most suitable value for this parameter.\n\
    Respond ONLY with the selected value, no explanations."
cache:
  enabled: true
  maxEntries: 1000
  ttlSeconds: 300
